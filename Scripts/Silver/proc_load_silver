/*
===============================================================================
Stored Procedure: Load Silver Layer (Bronze -> Silver)
===============================================================================
Script Purpose:
    This stored procedure performs the ETL (Extract, Transform, Load) process to 
    populate the 'silver' schema tables from the 'bronze' schema.
	Actions Performed:
		- Truncates Silver tables.
		- Inserts transformed and cleansed data from Bronze into Silver tables.
		
Parameters:
    None. 
	  This stored procedure does not accept any parameters or return any values.


===============================================================================
*/

-- Usage Example:
 --   CALL silver_load_silver();
    
DELIMITER $$

CREATE PROCEDURE silver_load_silver()
BEGIN
    DECLARE start_time DATETIME;
    DECLARE end_time DATETIME;
    DECLARE batch_start_time DATETIME;
    DECLARE batch_end_time DATETIME;

    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        SELECT '*** ERROR OCCURRED ***' AS error_message;
    END;

    SET batch_start_time = NOW();

    SELECT '================================================' AS log_line;
    SELECT 'Loading Silver Layer' AS log_message;
    SELECT '================================================' AS log_line;

    SELECT '------------------------------------------------' AS log_line;
    SELECT 'Loading CRM Tables' AS log_section;

-- 1. Loading silver.crm_cust_info
    SET start_time = NOW();
    SELECT '>> Truncating Table: silver.crm_cust_info' AS log;
    TRUNCATE TABLE silver.crm_cust_info;
    SELECT '>> Inserting Data Into: silver.crm_cust_info' AS log;

    INSERT INTO silver.crm_cust_info(
        cst_id, cst_key, cst_firstname, cst_lastname, cst_marital_status,
        cst_gndr, cst_create_date)
    SELECT
        cst_id,
        cst_key,
        TRIM(cst_firstname),
        TRIM(cst_lastname),
        CASE 
            WHEN UPPER(TRIM(cst_marital_status)) = 'S' THEN 'Single'
            WHEN UPPER(TRIM(cst_marital_status)) = 'M' THEN 'Married'
            ELSE 'n/a'
        END,
        CASE 
            WHEN UPPER(TRIM(cst_gndr)) = 'M' THEN 'Male'
            WHEN UPPER(TRIM(cst_gndr)) = 'F' THEN 'Female'
            ELSE 'n/a'
        END,
        cst_create_date
    FROM (
        SELECT *, ROW_NUMBER() OVER(PARTITION BY cst_id ORDER BY cst_create_date DESC) AS flag_last
        FROM bronze.crm_cust_info
        WHERE cst_id IS NOT NULL AND cst_id != '0' AND cst_id != ''
    ) t
    WHERE flag_last = 1;

    SET end_time = NOW();
    SELECT CONCAT('>> Load Duration: ', TIMESTAMPDIFF(SECOND, start_time, end_time), ' seconds') AS log;
    SELECT '>> -------------' AS log;

-- 2. Loading silver.crm_prd_info
    SET start_time = NOW();
    SELECT '>> Truncating Table: silver.crm_prd_info' AS log;
    TRUNCATE TABLE silver.crm_prd_info;
    SELECT '>> Inserting Data Into: silver.crm_prd_info' AS log;

    INSERT INTO silver.crm_prd_info(
        prd_id, cat_id, prd_key, prd_nm, prd_cost,
        prd_line, prd_start_dt, prd_end_dt, dwh_create_date)
    SELECT
        prd_id,
        REPLACE(SUBSTRING(prd_key,1,5),'-','_'),
        SUBSTRING(prd_key,7, LENGTH(prd_key)),
        prd_nm,
        CASE 
            WHEN prd_cost IS NULL OR prd_cost < 0 THEN NULL
            ELSE prd_cost
        END,
        CASE UPPER(TRIM(prd_line))
            WHEN 'M' THEN 'Mountain'
            WHEN 'R' THEN 'Road'
            WHEN 'S' THEN 'Other Sales'
            WHEN 'T' THEN 'Touring'
            ELSE 'n/a'
        END,
        prd_start_dt,
        DATE_FORMAT(
            DATE_SUB(
                LEAD(prd_start_dt) OVER (PARTITION BY prd_key ORDER BY prd_start_dt),
                INTERVAL 1 DAY
            ), '%Y-%m-%d') AS prd_end_dt,
        CURRENT_TIMESTAMP
    FROM bronze.crm_prd_info;

    SET end_time = NOW();
    SELECT CONCAT('>> Load Duration: ', TIMESTAMPDIFF(SECOND, start_time, end_time), ' seconds') AS log;
    SELECT '>> -------------' AS log;

-- 3. Loading silver.crm_sales_details
    SET start_time = NOW();
    SELECT '>> Truncating Table: silver.crm_sales_details' AS log;
    TRUNCATE TABLE silver.crm_sales_details;
    SELECT '>> Inserting Data Into: silver.crm_sales_details' AS log;

    INSERT INTO silver.crm_sales_details(
        sls_ord_num, sls_prd_key, sls_cust_id, sls_order_dt,
        sls_ship_dt, sls_due_dt, sls_quantity, sls_price,
        sls_sales, dwh_create_date)
    SELECT
        sls_ord_num,
        sls_prd_key,
        sls_cust_id,
        CASE WHEN sls_order_dt = 0 OR LENGTH(sls_order_dt) != 8 THEN NULL
             ELSE CAST(CAST(sls_order_dt AS CHAR) AS DATE) END,
        CASE WHEN sls_ship_dt = 0 OR LENGTH(sls_ship_dt) != 8 THEN NULL
             ELSE CAST(CAST(sls_ship_dt AS CHAR) AS DATE) END,
        CASE WHEN sls_due_dt = 0 OR LENGTH(sls_due_dt) != 8 THEN NULL
             ELSE CAST(CAST(sls_due_dt AS CHAR) AS DATE) END,
        sls_quantity,
        CAST(CASE WHEN sls_price IS NULL OR sls_price <= 0 THEN NULLIF(sls_sales, 0) / NULLIF(sls_quantity, 0) ELSE sls_price END AS UNSIGNED),
        CAST(CASE 
            WHEN sls_sales IS NULL OR sls_sales <= 0 OR sls_sales != sls_quantity * ABS(
                CASE WHEN sls_price IS NULL OR sls_price <= 0 THEN NULLIF(sls_sales, 0) / NULLIF(sls_quantity, 0) ELSE sls_price END
            )
            THEN sls_quantity * ABS(
                CASE WHEN sls_price IS NULL OR sls_price <= 0 THEN NULLIF(sls_sales, 0) / NULLIF(sls_quantity, 0) ELSE sls_price END
            )
            ELSE sls_sales
        END AS UNSIGNED),
        CURRENT_TIMESTAMP
    FROM bronze.crm_sales_details;

    SET end_time = NOW();
    SELECT CONCAT('>> Load Duration: ', TIMESTAMPDIFF(SECOND, start_time, end_time), ' seconds') AS log;
    SELECT '>> -------------' AS log;

-- 4. Loading silver.erp_cust_az12
    SET start_time = NOW();
    SELECT '>> Truncating Table: silver.erp_cust_az12' AS log;
    TRUNCATE TABLE silver.erp_cust_az12;
    SELECT '>> Inserting Data Into: silver.erp_cust_az12' AS log;

    INSERT INTO silver.erp_cust_az12(cid, bdate, gen)
    SELECT 
        CASE WHEN cid LIKE 'NAS%' THEN SUBSTRING(cid, 4) ELSE cid END,
        CASE WHEN bdate > NOW() THEN NULL ELSE bdate END,
        CASE 
            WHEN UPPER(REGEXP_REPLACE(gen, '\\s+', '')) IN ('F', 'FEMALE') THEN 'Female'
            WHEN UPPER(REGEXP_REPLACE(gen, '\\s+', '')) IN ('M', 'MALE') THEN 'Male'
            ELSE 'n/a'
        END
    FROM bronze.erp_cust_az12;

    SET end_time = NOW();
    SELECT CONCAT('>> Load Duration: ', TIMESTAMPDIFF(SECOND, start_time, end_time), ' seconds') AS log;
    SELECT '>> -------------' AS log;

-- 5. Loading silver.erp_loc_a101
    SET start_time = NOW();
    SELECT '>> Truncating Table: silver.erp_loc_a101' AS log;
    TRUNCATE TABLE silver.erp_loc_a101;
    SELECT '>> Inserting Data Into: silver.erp_loc_a101' AS log;

    INSERT INTO silver.erp_loc_a101 (cid, cntry)
    SELECT
        REPLACE(cid, '-', ''),
        CASE 
            WHEN cntry IS NULL OR REGEXP_REPLACE(TRIM(cntry), '\\s+', '') = '' THEN 'n/a'
            WHEN UPPER(REGEXP_REPLACE(TRIM(cntry), '\\s+', '')) = 'DE' THEN 'Germany'
            WHEN UPPER(REGEXP_REPLACE(TRIM(cntry), '\\s+', '')) IN ('US', 'USA') THEN 'United States'
            WHEN UPPER(REGEXP_REPLACE(TRIM(cntry), '\\s+', '')) = 'UK' THEN 'United Kingdom'
            ELSE TRIM(REGEXP_REPLACE(cntry, '[\\r\\n\\t]+', ''))
        END
    FROM bronze.erp_loc_a101;

    SET end_time = NOW();
    SELECT CONCAT('>> Load Duration: ', TIMESTAMPDIFF(SECOND, start_time, end_time), ' seconds') AS log;
    SELECT '>> -------------' AS log;

-- 6. Loading silver.erp_px_cat_g1v2
    SET start_time = NOW();
    SELECT '>> Truncating Table: silver.erp_px_cat_g1v2' AS log;
    TRUNCATE TABLE silver.erp_px_cat_g1v2;
    SELECT '>> Inserting Data Into: silver.erp_px_cat_g1v2' AS log;

    INSERT INTO silver.erp_px_cat_g1v2(id, cat, subcat, maintenance)
    SELECT id, cat, subcat, maintenance
    FROM bronze.erp_px_cat_g1v2;

    SET end_time = NOW();
    SELECT CONCAT('>> Load Duration: ', TIMESTAMPDIFF(SECOND, start_time, end_time), ' seconds') AS log;
    SELECT '>> -------------' AS log;

-- Wrap-up logs
    SET batch_end_time = NOW();

    SELECT '==========================================' AS log;
    SELECT 'Loading Silver Layer is Completed' AS log;
    SELECT CONCAT('   - Total Load Duration: ', TIMESTAMPDIFF(SECOND, batch_start_time, batch_end_time), ' seconds') AS log;
    SELECT '==========================================' AS log;

END $$

DELIMITER ;
SELECT * FROM silver.crm_sales_details;
